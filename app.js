//jshint esversion:6

//requiring 2 packages that we installed express & body-parser
const express = require("express");
const bodyParser = require("body-parser");
const mongoose = require("mongoose");
const _ = require("lodash");

// const date = require(__dirname + "/date.js");//we are requiring a module which we made and it's located at current directory name and then we add route name


//creating our app const by using express
const app = express();


app.set('view engine', 'ejs');//tell app i.e. express to use ejs module...should be written below const app = expres()...else error message shoes app was used before it was declared

//tell our app to use body-Parser...this will allow me to sue req.body.newItem here .body will work only after we write the below code 
app.use(bodyParser.urlencoded({extended: true}));

//tell our app to use static files in public folder
app.use(express.static("public"));

//make a connection url for mongodb and makking a database that we'll connect to
mongoose.connect("mongodb+srv://admin-Riya:test123@cluster0.ylawr.mongodb.net/todolistDB", {useNewUrlParser: true});

//creating a schema
const itemsSchema = {
    name: String,
};

//creating a mongoose model and a collection called items then name this collection as Item
const Item = mongoose.model("Item", itemsSchema);

//create some default new documents here Item is our model name
const item1 = new Item({
    name: "Welcome to our todolist!"
});

const item2 = new Item({
    name: "Hit the + button to add a new item"
});

const item3 = new Item({
    name: "<-- Hit this to delete an item."
});

const defaultItems = [item1, item2, item3];


//creating a new schema
const listSchema = {
    name: String,
    items: [itemsSchema]
};

//now creating a new model for our listSchema
const List = mongoose.model("List", listSchema);


//creating a get route that sends browser Hello when a user tries to access home route
app.get("/", function (req, res) {

    //find all documents and log into the terminal
    Item.find({}, function(err, foundItems){
        // console.log(foundItems);
        if(foundItems.length === 0){

            //insert these many data into the model
            Item.insertMany(defaultItems, function(err){
                if(err){
                    console.log(err);
                }else{
                    console.log("Successfully saved default items to DB!");
                }
            });
            res.redirect("/");//it'll check if there are any items in our items collection if none present it'll make 3 items n add into items collection n finally redirect into the root route

        }else{
            res.render("list", { listTitle: "Today", newListItems: foundItems });
        }
    });
    // const day = date.getDate();//add parentheses if we want to run our function i.e. date()....we can even use date.getDate() to get format as thurday, 28th september rather than only Thursday by using only date.getDay()

    //res.render("list", { listTitle: "Today", newListItems: items });//for this you need to make a views folder and make a list.ejs file in it
    //res.send("Hello");//we send data from our server i.e. app.js to the browser via this send method
});

//creating a dynamic url
app.get("/:customListName", function(req, res){
    const customListName = _.capitalize(req.params.customListName);

    List.findOne({name: customListName}, function(err, foundList){
        if(!err){
            if(!foundList){
                //create a new list
                //after creating our list model create list documents
                const list = new List({
                name: customListName,
                items: defaultItems
                });
                list.save();//to save these documents into the list model
                res.redirect("/" + customListName);
            }else{
                //show an existing

                res.render("list", { listTitle: foundList.name, newListItems: foundList.items });
            }
        }
    }); 

});

//passed the data from the webpage to our server by app.post()
//calls the post request generated by the submit button on entering the text in the input box to the home route
app.post("/",function(req, res){

    const itemName = req.body.newItem;//we tap into the request looking into the body of the request and we search for the value of something called newItem
    const listName = req.body.list;//we tap into listName to submit the value to the customList

    const item = new Item({
        name: itemName
    });

    if(listName === "Today"){
        item.save();//it'll save the data newly added to the list

        res.redirect("/");//this will enable to display added new item to the list by redirecting to app.get("/")
    }else{
        List.findOne({name: listName}, function(err, foundList){
            foundList.items.push(item);
            foundList.save();
            res.redirect("/" + listName);
        })
    }


});

app.post("/delete", function(req, res){
    const checkedItemId = req.body.checkbox;//req.body.checkbox this gives id of the checked item
    const listName = req.body.listName;//from hidden input on list.ejs

    if(listName === "Today"){
        Item.findByIdAndRemove(checkedItemId, function(err){
            if(err){
                console.log(err);
            }else{
                console.log("Successfully deleted checked it");
            }
        });
    } else{
        List.findOneAndUpdate({name: listName}, {$pull: {items: {_id: checkedItemId}}}, function(err, foundList){
            if(!err){
                res.redirect("/" + listName);
            }
        });
    }

   
});


app.get("/about", function(req, res){
    res.render("about");
});

app.post("/work", function(req, res){
    let item = req.body.newItem;
    workItems.push(item);
    res.redirect("/work");
})

//listen on port 3000 & we console log the message
app.listen(3000, function () {
    console.log("Server started on port 3000");
});